#!/usr/bin/nodejs
const crypto = require('crypto');

var spaces=false;
var results = [];
var args = process.argv;
var entropy = get_entropy();

function print_usage() {
    console.log("Usage: node main.js [OPTION [ARG]]...");
    console.log("");
    console.log("NOTE: An emoji password is generated by default. A font supporting");
    console.log("emoji may be needed to view the emoji characters correctly.");
    console.log("");
    console.log("   -h");
    console.log("   --help");
    console.log("       Print this help and exit.");
    console.log("");
    console.log("   -d <language>");
    console.log("   --diceware <language>");
    console.log("       Choose a Diceware language. Default is English.");
    console.log("       <language> must be one of:");
    console.log("           Basque, Beale, Bulgarian, Catalan, Chinese, Czech,");
    console.log("           Danish, Dutch, English, Esperanto, Finnish, French,");
    console.log("           German, Italian, Japanese, Maori, Norwegian, Polish,");
    console.log("           Portuguese, Russian, Slovenian, Spanish, Swedish, Turkish.");
    console.log("");
    console.log("   -e <wordlist>");
    console.log("   --eff <wordlist>");
    console.log("       Choose an EFF wordlist. Default is Short.");
    console.log("       <wordlist> must be one of:");
    console.log("           Distant, Long, Short.");
    console.log("");
    console.log("   -a <wordlist>");
    console.log("   --alternate <wordlist>");
    console.log("       Choose an alternate wordlist. Default is Trump.");
    console.log("       <wordlist> must be one of:");
    console.log("           Elvish, Klingon, PGP, Rockyou, Simposons, Trump");
    console.log("");
    console.log("   -b <language>");
    console.log("   --bitcoin <language>");
    console.log("       Choose a Bitcoin language. Default is English.");
    console.log("       <language> must be one of:");
    console.log("           Chinese, English, French, Italian, Japanese, Korean");
    console.log("       NOTE:");
    console.log("           Simplified Chinese is the default Chinese character set.");
    console.log("           If you want to use Traditional Chinese, use --traditional.");
    console.log("");
    console.log("   -t");
    console.log("   --traditional");
    console.log("       Use the Traditional Chinese character set with Bitcoin.");
    console.log("");
    console.log("   -n");
    console.log("   --ninja");
    console.log("       Choose Secret Ninja encoding.");
    console.log("");
    console.log("   -c");
    console.log("   --cosby");
    console.log("       Choose Bill Cosby Bebob.");
    console.log("");
    console.log("   -k");
    console.log("   --kpop");
    console.log("       Choose Korean K-pop words.");
    console.log("");
    console.log("   -e <base>");
    console.log("   --random <base>");
    console.log("       Choose a number base to generated. Default is Base94");
    console.log("       <base> must be one of:");
    console.log("           Base94, Base64, Base32, Base16, Base10.");
    console.log("");
    console.log("   -o <generator>");
    console.log("   --only <generator>");
    console.log("       Choose a generator instead of printing all six (default).");
    console.log("       <generator> must be one of:");
    console.log("           Diceware, EFF, Alternate, Pseudowords, Random, Emoji");
    console.log("");
    console.log("   -m <number>");
    console.log("   --min-entropy <number>");
    console.log("       Set a minimum entropy requirement in bits. Default is 70.");
    console.log("");
    console.log("   -j");
    console.log("   --json");
    console.log("       Output the passwords and meta in JSON format.");
    console.log("");
    console.log("   -H");
    console.log("   --hyphenate");
    console.log("       Add hyphens to the Diceware, EFF, and Alternate passphrases.");
    console.log("");
    process.exit();
}

String.prototype.rtrim = function() { return this.replace(/\s+$/g,""); }

function get_entropy() {
    if (args.indexOf("--min-entropy") != -1) {
        return args[args.indexOf("--min-entropy") +1 ];
    }
    else if (args.indexOf("-m") != -1) {
        return args[args.indexOf("-m") +1 ];
    }
    else {
        return 70;
    }
}

/* Uniform, unbiased, secure, random number generator */
function sec_rand(count) {
    var min, rand;

    count >>>= 0;
    min = (-count >>> 0) % count;
    do {
        rand = parseInt(crypto.randomBytes(4).toString('hex'), 16);
    } while (rand < min);

    return rand % count;
}

function generate_pass(len, set, spaces) {
    var pass = "";
    if (typeof set == "string") {
        var pass_arr = set.split("");
    }
    else {
        pass_arr = set;
    }
    for(i=len; i--;) {
        if (spaces) {
            pass += pass_arr[sec_rand(set.length)];
            pass += " ";
        }
        else pass += pass_arr[sec_rand(set.length)];
    }
    return pass.rtrim();
}

function generate_diceware() {
    if (args.indexOf("--diceware") != -1) {
        var lang = args[args.indexOf("--diceware") + 1];
    }
    else if (args.indexOf("-d") != -1) {
        var lang = args[args.indexOf("-d") + 1];
    }
    else {
        var lang = "English";
    }

    var wordlist = [];
    switch(lang) {
        case "Basque":
        case "basque":
            const diceware_basque = require('./lists/diceware_basque');
            wordlist = diceware_basque.wordlist;
            break;
        case "Beale":
        case "beale":
            const diceware_beale = require('./lists/diceware_beale');
            wordlist = diceware_beale.wordlist;
            break;
        case "Bulgarian":
        case "bulgarian":
            const diceware_bulgarian = require('./lists/diceware_bulgarian');
            wordlist = diceware_bulgarian.wordlist;
            break;
        case "Catalan":
        case "catalan":
            const diceware_catalan = require('./lists/diceware_catalan');
            wordlist = diceware_catalan.wordlist;
            break;
        case "Chinese":
        case "chinese":
            const diceware_chinese = require('./lists/diceware_chinese');
            wordlist = diceware_chinese.wordlist;
            break;
        case "Czech":
        case "czech":
            const diceware_czech = require('./lists/diceware_czech');
            wordlist = diceware_czech.wordlist;
            break;
        case "Danish":
        case "danish":
            const diceware_danish = require('./lists/diceware_danish');
            wordlist = diceware_danish.wordlist;
            break;
        case "Dutch":
        case "dutch":
            const diceware_dutch = require('./lists/diceware_dutch');
            wordlist = diceware_dutch.wordlist;
            break;
        case "English":
        case "english":
            const diceware_english = require('./lists/diceware_english');
            wordlist = diceware_english.wordlist;
            break;
        case "Esperanto":
        case "esperanto":
            const diceware_esperanto = require('./lists/diceware_esperanto');
            wordlist = diceware_esperanto.wordlist;
            break;
        case "Finnish":
        case "finnish":
            const diceware_finnish = require('./lists/diceware_finnish');
            wordlist = diceware_finnish.wordlist;
            break;
        case "French":
        case "french":
            const diceware_french = require('./lists/diceware_french');
            wordlist = diceware_french.wordlist;
            break;
        case "German":
        case "german":
            const diceware_german = require('./lists/diceware_german');
            wordlist = diceware_german.wordlist;
            break;
        case "Italian":
        case "italian":
            const diceware_italian = require('./lists/diceware_italian');
            wordlist = diceware_italian.wordlist;
            break;
        case "Japanese":
        case "japanese":
            const diceware_japanese = require('./lists/diceware_japanese');
            wordlist = diceware_japanese.wordlist;
            break;
        case "Maori":
        case "maori":
            const diceware_maori = require('./lists/diceware_maori');
            wordlist = diceware_maori.wordlist;
            break;
        case "Norwegian":
        case "norwegian":
            const diceware_norwegian = require('./lists/diceware_norwegian');
            wordlist = diceware_norwegian.wordlist;
            break;
        case "Polish":
        case "polish":
            const diceware_polish = require('./lists/diceware_polish');
            wordlist = diceware_polish.wordlist;
            break;
        case "Portuguese":
        case "portuguese":
            const diceware_portuguese = require('./lists/diceware_portuguese');
            wordlist = diceware_portuguese.wordlist;
            break;
        case "Russian":
        case "russian":
            const diceware_russian = require('./lists/diceware_russian');
            wordlist = diceware_russian.wordlist;
            break;
        case "Slovenian":
        case "slovenian":
            const diceware_slovenian = require('./lists/diceware_slovenian');
            wordlist = diceware_slovenian.wordlist;
            break;
        case "Spanish":
        case "spanish":
            const diceware_spanish = require('./lists/diceware_spanish');
            wordlist = diceware_spanish.wordlist;
            break;
        case "Swedish":
        case "swedish":
            const diceware_swedish = require('./lists/diceware_swedish');
            wordlist = diceware_swedish.wordlist;
            break;
        case "Turkish":
        case "turkish":
            const diceware_turkish = require('./lists/diceware_turkish');
            wordlist = diceware_turkish.wordlist;
            break;
        default:
            console.log("Unknown language: " + lang);
            process.exit(1);
    }

    var assoc_arr = {};
    var len = Math.ceil(entropy/Math.log2(wordlist.length));
    var pass = generate_pass(len, wordlist, true);
    if ((args.indexOf("--hyphenate") != -1) || (args.indexOf("-H")) != -1) {
        pass = pass.split(" ").join("-");
    }
    assoc_arr["Generator"] = "Diceware";
    assoc_arr["Wordlist"] = lang;
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = pass.replace(/\s/g, '').length;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(wordlist.length));
    return assoc_arr;
}

function generate_eff() {
    if (args.indexOf("--eff") != -1) {
        var eff_set = args[args.indexOf("--eff") + 1];
    }
    else if (args.indexOf("-e") != -1) {
        var eff_set = args[args.indexOf("-e") + 1];
    }
    else {
        var eff_set = "Short";
    }

    var wordlist = [];
    switch(eff_set) {
        case "Distant":
        case "distant":
            const eff_distant = require('./lists/eff_distant');
            wordlist = eff_distant.eff_distant;
            break;
        case "Long":
        case "long":
            const eff_long = require('./lists/eff_long');
            wordlist = eff_long.eff_long;
            break;
        case "Short":
        case "short":
            const eff_short = require('./lists/eff_short');
            wordlist = eff_short.eff_short;
            break;
        default:
            console.log("Unknown wordlist: " + eff_set);
            process.exit();

    }

    var assoc_arr = {};
    var len = Math.ceil(entropy/Math.log2(wordlist.length));
    var pass = generate_pass(len, wordlist, true);
    if ((args.indexOf("--hyphenate") != -1) || (args.indexOf("-H")) != -1) {
        pass = pass.split(" ").join("-");
    }
    assoc_arr["Generator"] = "EFF";
    assoc_arr["Wordlist"] = eff_set;
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = pass.replace(/\s/g, '').length;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(wordlist.length));
    return assoc_arr;
}

function generate_alternate() {
    if (args.indexOf("--alternate") != -1) {
        var alt_set = args[args.indexOf("--alternate") + 1];
    }
    else if (args.indexOf("-a") !=-1) {
        var alt_set = args[args.indexOf("-a") + 1];
    }
    else {
        var alt_set = "Trump";
    }

    var wordlist = [];
    switch(alt_set) {
        case "Elvish":
        case "elvish":
            const elvish_wordlist = require('./lists/alternate_elvish');
            wordlist = elvish_wordlist.wordlist;
            break;
        case "Klingon":
        case "klingon":
            const klingon_wordlist = require('./lists/alternate_klingon');
            wordlist = klingon_wordlist.wordlist;
            break;
        case "PGP":
        case "Pgp":
        case "pgp":
            const pgp_wordlist = require('./lists/alternate_pgp');
            wordlist = pgp_wordlist.wordlist;
            break;
        case "Rockyou":
        case "RockYou":
        case "rockyou":
            const rockyou_wordlist = require('./lists/alternate_rockyou');
            wordlist = rockyou_wordlist.wordlist;
            break;
        case "Simpsons":
        case "simpsons":
            const simpsons_wordlist = require('./lists/alternate_simpsons');
            wordlist = simpsons_wordlist.wordlist;
            break;
        case "Trump":
        case "trump":
            const trump_wordlist = require('./lists/alternate_trump');
            wordlist = trump_wordlist.wordlist;
            break;
        default:
            console.log("Unknown wordlist: " + alt_set);
            process.exit(1);
    }

    var assoc_arr = {};
    var len = Math.ceil(entropy/Math.log2(wordlist.length));
    var pass = generate_pass(len, wordlist, true);
    if ((args.indexOf("--hyphenate") != -1) || (args.indexOf("-H")) != -1) {
        pass = pass.split(" ").join("-");
    }
    assoc_arr["Generator"] = "Alternate";
    assoc_arr["Wordlist"] = alt_set;
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = pass.replace(/\s/g, '').length;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(wordlist.length));
    return assoc_arr;
}

function generate_bitcoin() {
    if (args.indexOf("--bitcoin") != -1) {
        var lang = args[args.indexOf("--bitcoin") + 1];
    }
    else if (args.indexOf("-b") != -1) {
        var lang = args[args.indexOf("-b") + 1];
    }
    else {
        var lang = "English";
    }

    var wordlist = [];
    switch(lang) {
        case "Chinese":
        case "chinese":
            if ((args.indexOf("--traditional")) != -1 || (args.indexOf("-t")) != -1) {
                const bitcoin_cn_trad = require('./lists/bitcoin_cn_trad');
                wordlist = bitcoin_cn_trad.wordlist;
            }
            else {
                const bitcoin_cn_simp = require('./lists/bitcoin_cn_simp');
                wordlist = bitcoin_cn_simp.wordlist;
            }
            break;
        case "English":
        case "english":
            const english_wordlist = require('./lists/bitcoin_en');
            wordlist = english_wordlist.wordlist;
            break;
        case "French":
        case "french":
            const french_wordlist = require('./lists/bitcoin_fr');
            wordlist = french_wordlist.wordlist;
            break;
        case "Italian":
        case "italian":
            const italian_wordlist = require('./lists/bitcoin_it');
            wordlist = italian_wordlist.wordlist;
            break;
        case "Japanese":
        case "japanese":
            const japanese_wordlist = require('./lists/bitcoin_jp');
            wordlist = japanese_wordlist.wordlist;
            break;
        case "Korean":
        case "korean":
            const korean_wordlist = require('./lists/bitcoin_kr');
            wordlist = korean_wordlist.wordlist;
            break;
        case "Spanish":
        case "spanish":
            const spanish_wordlist = require('./lists/bitcoin_es');
            wordlist = spanish_wordlist.wordlist;
            break;
        default:
            console.log("Unknown language: " + lang);
            process.exit(1);
    }

    var assoc_arr = {};
    var len = Math.ceil(entropy/Math.log2(wordlist.length));
    var pass = generate_pass(len, wordlist, true);
    if ((args.indexOf("--hyphenate") != -1) || (args.indexOf("-H")) != -1) {
        pass = pass.split(" ").join("-");
    }
    assoc_arr["Generator"] = "Bitcoin";
    assoc_arr["Wordlist"] = lang;
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = pass.replace(/\s/g, '').length;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(wordlist.length));
    return assoc_arr;
}

function generate_ninja() {
    var ninja = ['ka','zu','mi','te','ku','lu','ji','ri','ki','zu','me','ta','rin','to','mo','no','ke','shi','ari','chi','do','ru','mei','na','fu','zi'];
    var len = Math.ceil(entropy/Math.log2(ninja.length));
    var pass = "";
    
    for (i=0; i<len; i++) {
        pass += ninja[sec_rand(len)];
        if (i%3 == 2 && i != len-1) {
            pass += "-";
        }
    }
    return [pass, ninja.length, Math.floor(len*Math.log2(ninja.length))];
}

function generate_cosby() {
    // 32 unique words = 5 bits of entropy per word
    var cosby = ['Bada','Badum','Bee','Bloo','Bop','Caw','Derp','Dip','Doo','Dub','Hip','Ka','Loo','Meep','Mim','Moom','Na','Naw','Nerp','Nup','Pa','Papa','Spee','Squee','Squoo','Woobly','Wop','Yee','Zap','Zip','Zop','Zoop','Zow'];
    var len = Math.ceil(entropy/Math.log2(cosby.length));
    var pass = "";
    
    for (i=0; i<len; i++) {
        pass += cosby[sec_rand(len)];
        if (i%3 == 2 && i != len-1) {
            pass += "-";
        }
    }
    return [pass, cosby.length, Math.floor(len*Math.log2(cosby.length))];
}

function generate_kpop() {
    // 64 unique words = 6 bits of entropy per word
    var kpop = ['A','Ah','Bae','Bin','Bo','Choi','Chul','Da','Do','Dong','Eun','Gi','Gun','Ha','Hae','Hee','Ho','Hu','Hwa','Hwan','Hye','Hyo','Hyun','Il','In','Ja','Jae','Ji','Jin','Jong','Joo','Joon','Ju','Jun','Jung','Ki','Kun','Kyu','Lee','Mi','Min','Moon','Nam','Ok','Park','Rin','Seo','Seul','Shi','Sik','So','Song','Soo','Su','Sun','Sung','Won','Woo','Ye','Yeon','Yoo','Yu','Yul','Yun'];
    var len = Math.ceil(entropy/Math.log2(kpop.length));
    var pass = "";
    
    for (i=0; i<len; i++) {
        pass += kpop[sec_rand(len)];
        if (i%2 == 1 && i != len-1) {
            pass += "-";
        }
    }
    return [pass, kpop.length, Math.floor(len*Math.log2(kpop.length))];
}

function generate_babble() {
    var pass = [];
    var vowels = "aeiouy";
    var consonants = "bcdfghklmnprstvzx";
    var v_ent = Math.log2(vowels.length);
    var c_ent = Math.log2(consonants.length);
    var out_ent = (2*c_ent)+(2*v_ent);
    var in_ent = (3*c_ent)+(2*v_ent);

    entropy = entropy - (2*out_ent);

    var len = Math.ceil(entropy/in_ent);
    var tot_ent = out_ent + (len*in_ent) + out_ent;

    for (var i=0; i<len+2; i++) {
        for (var j=0; j<5; j++) {
            if (j % 2 == 0) {
                pass[(5*i)+j] = generate_pass(1, consonants);
            }
            else {
                pass[(5*i)+j] = generate_pass(1, vowels);
            }
        }
    }

    pass[0] = "x";
    pass[pass.length-1] = "x";

    for (var i=pass.length; i>0; i-=5) {
        pass.splice(i, 0, "-");
    }
    pass.pop() // strip last "-"
    return [pass.join(""), (len+2)*5, Math.floor(tot_ent)];
}

function generate_pseudowords() {
    if ((args.indexOf("--ninja") != -1) || (args.indexOf("-n")) != -1) {
        var pw_type = "Secret Ninja"
    }
    else if ((args.indexOf("--cosby") != -1) || (args.indexOf("-c")) != -1) {
        var pw_type = "Cosby Bebop"
    }
    else if ((args.indexOf("--kpop") != -1) || (args.indexOf("-k")) != -1) {
        var pw_type = "Korean K-pop"
    }
    else {
        var pw_type = "Bubble Babble";
    }

    if (pw_type == "Secret Ninja") {
        var ret = generate_ninja();
    }
    else if (pw_type == "Cosby Bebop") {
        var ret = generate_cosby();
    }
    else if (pw_type == "Korean K-pop") {
        var ret = generate_kpop();
    }
    else {
        var ret = generate_babble();
    }
    var assoc_arr = {};
    var pass = ret[0];
    var len = ret[1];
    var ent = ret[2];
    assoc_arr["Generator"] = "Pseudowords";
    assoc_arr["Wordlist"] = pw_type;
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = len;
    assoc_arr["Entropy"] = ent;
    return assoc_arr;
}

function generate_base94() {
    var assoc_arr = {};
    var s = '';
    for (i=0; i<94; i++) {
        s += String.fromCharCode(33+i);
    }
    var len = Math.ceil(entropy/Math.log2(s.length));
    var pass = generate_pass(len, s);
    assoc_arr["Generator"] = "Random";
    assoc_arr["Wordlist"] = "Base94";
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = len;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(s.length));
    return assoc_arr;
}

function generate_base64() {
    var assoc_arr = {};
    var s = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/";
    var len = Math.ceil(entropy/Math.log2(s.length));
    var pass = generate_pass(len, s);
    assoc_arr["Generator"] = "Random";
    assoc_arr["Wordlist"] = "Base64";
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = len;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(s.length));
    return assoc_arr;
}

function generate_base32() {
    var assoc_arr = {};
    var s = "0123456789abcdefghjkmnpqrstvwxyz";
    var len = Math.ceil(entropy/Math.log2(s.length));
    var pass = generate_pass(len, s);
    var result = "Base32: '" + pass + "', ";
    assoc_arr["Generator"] = "Random";
    assoc_arr["Wordlist"] = "Base32";
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = len;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(s.length));
    return assoc_arr;
}

function generate_base16() {
    var assoc_arr = {};
    var s = "0123456789abcdef"
    var len = Math.ceil(entropy/Math.log2(s.length));
    var pass = generate_pass(len, s);
    var result = "Base16: '" + pass + "', ";
    assoc_arr["Generator"] = "Random";
    assoc_arr["Wordlist"] = "Base16";
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = len;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(s.length));
    return assoc_arr;
}

function generate_base10() {
    var assoc_arr = {};
    var s = "0123456789"
    var len = Math.ceil(entropy/Math.log2(s.length));
    var pass = generate_pass(len, s);
    var result = "Base10: '" + pass + "', ";
    assoc_arr["Generator"] = "Random";
    assoc_arr["Wordlist"] = "Base10";
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = len;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(s.length));
    return assoc_arr;
}

function generate_random() {
    var s = "";
    if (args.indexOf("--random") != -1) {
        var rand_set = args[args.indexOf("--random") + 1];
    }
    else if (args.indexOf("-r") != -1) {
        var rand_set = args[args.indexOf("-r") + 1];
    }
    else {
        var rand_set = "Base94";
    }

    switch(rand_set) {
        case "Base94":
        case "base94":
        case "Base-94":
        case "base-94":
        case "Tetranonagesimal":
        case "tetranonagesimal":
            s = generate_base94();
            break;
        case "Base64":
        case "base64":
        case "Base-64":
        case "base-64":
        case "Tetrasexagesimal":
        case "tetrasexagesimal":
            s = generate_base64();
            break;
        case "Base32":
        case "base32":
        case "Base-32":
        case "base-32":
        case "Duotrigesimal":
        case "duotrigesimal":
            s = generate_base32();
            break;
        case "Base16":
        case "base16":
        case "Base-16":
        case "base-16":
        case "Hexadecimal":
        case "hexadecimal":
            s = generate_base16();
            break;
        case "Base10":
        case "base10":
        case "Base-10":
        case "base-10":
        case "Decimal":
        case "decimal":
            s = generate_base10();
            break;
        case "Emoji":
        case "emoji":
            s = generate_emoji();
            break;
        default:
            console.log("Unknown base: " + rand_set);
            process.exit(1);
    }
    return s;
}

function generate_emoji() {
    const emoji_wordlist = require('./lists/random_emoji');
    var wordlist = emoji_wordlist.wordlist;

    var assoc_arr = {};
    var len = Math.ceil(entropy/Math.log2(wordlist.length));
    var pass = generate_pass(len, wordlist, true);
    pass = pass.replace(/ /g,"");
    assoc_arr["Generator"] = "Random";
    assoc_arr["Wordlist"] = "Emoji";
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = len;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(wordlist.length));
    return assoc_arr;
}

if ((args.indexOf("--help") != -1) || (args.indexOf("-h")) != -1) {
    print_usage();
}

if (args.indexOf("--only") != -1) {
    var generator = args[args.indexOf("--only") + 1];
}
else if (args.indexOf("-o") != -1) {
    var generator = args[args.indexOf("-o") + 1];
}
if (generator !== undefined && generator !== null) {
    switch(generator) {
        case "Diceware":
        case "diceware":
            results.push(generate_diceware());
            break;
        case "EFF":
        case "Eff":
        case "eff":
            results.push(generate_eff());
            break;
        case "Alternate":
        case "alternate":
            results.push(generate_alternate());
            break;
        case "Bitcoin":
        case "bitcoin":
            results.push(generate_bitcoin());
            break;
        case "Pseudowords":
        case "pseudowords":
        case "Pseudoword":
        case "pseudoword":
        case "Pseudo":
        case "pseudo":
            results.push(generate_pseudowords());
            break;
        case "Random":
        case "random":
            results.push(generate_random());
            break;
        default:
            console.log("Unknown generator: " + args[args.indexOf("--only")+1])
            process.exit(1);
    }
}
else {
    results.push(generate_diceware());
    results.push(generate_eff());
    results.push(generate_alternate());
    results.push(generate_bitcoin());
    results.push(generate_pseudowords());
    results.push(generate_random());
}

if ((args.indexOf("--json") != -1) || (args.indexOf("-j")) != -1) {
    var json_ret = JSON.stringify(results, null, 2);
    console.log(json_ret);
}
else {
    for (var i=0; i<results.length; i++) {
        console.log(results[i].Generator + "(" + results[i].Wordlist + "): " + results[i].Password);
    }
}
